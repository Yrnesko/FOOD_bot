import uuid
import logging
from aiogram import types
from yookassa import Configuration, Payment
from context import AppContext
from middlewares.manager import activate_subscription
from functools import partial
from aiogram.dispatcher import FSMContext
from states import UserData
from database.database import get_user_id_by_tg_user_id, check_existing_meal_times
from handlers.meal_schedule_handler import choose_timezone


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa
SHOP_ID = "437684"
API_KEY = "live_aYLw_tfLcD7mDaPVfctHRvZhMX52kagUMDYrK6A3wtw"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa
Configuration.account_id = SHOP_ID
Configuration.secret_key = API_KEY


async def create_payment_link(amount, description, user_id):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
    """
    order_id = str(uuid.uuid4())

    payment_data = {
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/testForALLOnlyme_bot"
        },
        "description": description,
        "metadata": {
            "order_id": order_id,
            "user_id": user_id
        },
        "receipt": {
            "customer": {
                "full_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                "email": "example@example.com"
            },
            "items": [
                {
                    "description": description,
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{amount:.2f}",
                        "currency": "RUB"
                    },
                    "vat_code": 1,
                    "payment_mode": "full_payment",
                    "payment_subject": "service"
                }
            ]
        }
    }

    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
        payment = Payment.create(payment_data)

        logging.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {payment.id}, confirmation_url: {payment.confirmation.confirmation_url}")

        return payment

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        raise


async def check_payment_status_handler(callback_query: types.CallbackQuery, state: FSMContext, context: AppContext):
    logging.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è callback_query: {callback_query.data}")
    pool = context.pool
    user_id = callback_query.from_user.id

    try:
        payment_id = callback_query.data.split("_")[2]
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")

        payment = Payment.find_one(payment_id)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}")

        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ, –∫—Ä–æ–º–µ —è–≤–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        if payment.status in ["succeeded", "waiting_for_capture"]:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–∞–∂–µ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ waiting_for_capture –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await activate_subscription(context.pool, payment.metadata["user_id"], 3)
            await callback_query.message.edit_text("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            user_id_by_tg = await get_user_id_by_tg_user_id(pool, user_id)
            logging.info(f"–ü–æ–ª—É—á–µ–Ω ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_id_by_tg}")

            existing_meal_times = await check_existing_meal_times(pool, user_id_by_tg)
            logging.info(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è TG ID {user_id_by_tg}: {existing_meal_times}")

            if existing_meal_times:
                logging.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.")
                await callback_query.message.edit_text(
                    "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! üéâ\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
                )
            else:
                logging.info(
                    f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.")
                await choose_timezone(callback_query.message, state)

        else:
            logging.warning(f"–ü–ª–∞—Ç—ë–∂ {payment_id} –Ω–µ –ø—Ä–æ—à—ë–ª. –°—Ç–∞—Ç—É—Å: {payment.status}")
            await callback_query.message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {str(e)}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")





# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_payment_handlers(context: AppContext):
    dp = context.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    dp.register_callback_query_handler(
        partial(check_payment_status_handler, context=context),  # –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º partial
        lambda c: c.data and c.data.startswith("check_payment_"),
        state=UserData.managing_subscription
    )

