import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.dispatcher import FSMContext
from states import UserData
from menu.menu_messages import generate_data_confirmation_keyboard, get_result_message
from context import AppContext

# Configure logging
logging.basicConfig(level=logging.INFO)

async def height_handler(message: types.Message, state: FSMContext, context: AppContext):
    try:
        height = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175.5).")
        return

    await state.update_data(height=height)
    await message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –í–∞—à –≤–µ—Å (–≤ –∫–≥)?"
    )
    await state.set_state(UserData.waiting_for_weight)

async def weight_handler(message: types.Message, state: FSMContext, context: AppContext):
    try:
        weight = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 63.2).")
        return

    await state.update_data(weight=weight)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(UserData.waiting_for_age)

async def age_handler(message: types.Message, state: FSMContext, context: AppContext):
    try:
        age = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25).")
        return

    await state.update_data(age=age)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üôã‚Äç‚ôÇÔ∏è", callback_data="gender_male"),
        InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üôã‚Äç‚ôÄÔ∏è", callback_data="gender_female")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
    await state.set_state(UserData.waiting_for_gender)

async def gender_handler(callback_query: types.CallbackQuery, state: FSMContext, context: AppContext):
    gender = "–º—É–∂—Å–∫–æ–π" if callback_query.data == "gender_male" else "–∂–µ–Ω—Å–∫–∏–π"
    await state.update_data(gender=gender)

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π  üõå", callback_data="activity_low"),
        InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π  üí™", callback_data="activity_medium"),
        InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π  ü¶æ", callback_data="activity_high")
    )
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏üí™\n\n"
        "*–ù–∏–∑–∫–∏–π* - –æ–∑–Ω–∞—á–∞–µ—Ç –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π.\n\n"
        "*–°—Ä–µ–¥–Ω–∏–π* - –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å —É–º–µ—Ä–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º–∏.\n\n"
        "*–í—ã—Å–æ–∫–∏–π* - —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≤–æ–¥–∏–º—ã–µ 5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –≤–∫–ª—é—á–∞—è –∫–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

    await state.set_state(UserData.waiting_for_activity_level)

async def activity_level_handler(callback_query: types.CallbackQuery, state: FSMContext, context: AppContext):
    activity_level_mapping = {
        "activity_low": "1.2",
        "activity_medium": "1.55",
        "activity_high": "1.9"
    }

    activity_level_key = callback_query.data
    activity_level = activity_level_mapping.get(activity_level_key)

    if activity_level is None:
        return

    logging.info(f"Selected activity level: {activity_level}")

    await state.update_data(activity_level=activity_level)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="2", callback_data="meals_2"),
        InlineKeyboardButton(text="3", callback_data="meals_3")
    )
    await callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
    await callback_query.message.answer_photo(
        photo="https://i.imgur.com/OsMNHlm.png",
        caption="–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å –±—É–¥–µ—Ç?ü•ó",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UserData.waiting_for_meals_per_day)

async def meals_per_day_handler(callback_query: types.CallbackQuery, state: FSMContext, context: AppContext = None):
    meals_per_day = 2 if callback_query.data == "meals_2" else 3
    await state.update_data(meals_per_day=meals_per_day)

    user_data = await state.get_data()

    activity_level_display = {
        "1.2": "–ù–∏–∑–∫–∏–π",
        "1.55": "–°—Ä–µ–¥–Ω–∏–π",
        "1.9": "–í—ã—Å–æ–∫–∏–π"
    }

    result_message = get_result_message(user_data, activity_level_display, meals_per_day)

    keyboard = generate_data_confirmation_keyboard()
    await callback_query.message.delete()
    await callback_query.message.answer(result_message, reply_markup=keyboard)
    await state.set_state(UserData.confirming_data)

def register_user_data_handlers(context: AppContext):
    dp = context.dispatcher
    dp.register_message_handler(lambda msg, state=None: height_handler(msg, state, context), state=UserData.waiting_for_height)
    dp.register_message_handler(lambda msg, state=None: weight_handler(msg, state, context), state=UserData.waiting_for_weight)
    dp.register_message_handler(lambda msg, state=None: age_handler(msg, state, context), state=UserData.waiting_for_age)
    dp.register_callback_query_handler(lambda cb, state=None: gender_handler(cb, state, context), state=UserData.waiting_for_gender)
    dp.register_callback_query_handler(lambda cb, state=None: activity_level_handler(cb, state, context), state=UserData.waiting_for_activity_level)
    dp.register_callback_query_handler(lambda cb, state=None: meals_per_day_handler(cb, state, context), state=UserData.waiting_for_meals_per_day)
