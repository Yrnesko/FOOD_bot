from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states import UserData
import aiomysql
import logging
from context import AppContext
from datetime import datetime, timedelta
from scheduler import scheduler


#scheduler = SchedulerSingleton().scheduler

async def send_welcome(message: types.Message, context: AppContext = None):
    keyboard = InlineKeyboardMarkup()
    intro_button = InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="introduce")
    keyboard.add(intro_button)
    await message.answer_photo(
        photo="https://i.imgur.com/C31Zmpq.jpeg",
        caption=(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É —Ç–µ–ª—É –º–µ—á—Ç—ãüî•\n\n"
            "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —è - –±–æ—Ç –ò—Ä–∏–Ω—ã –û–ª–µ–π–Ω–∏–∫. –Ø –±—É–¥—É –≤–∞—à–∏–º –∫–∞—Ä–º–∞–Ω–Ω—ã–º –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º –∏ –ø–æ–º–æ–≥—É –≤–∞–º –¥–æ—Å—Ç–∏—á—å –∂–µ–ª–∞–µ–º–æ–≥–æ –≤–µ—Å–∞.\n\n"
            "üëâ –ù–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å"
        ),
        reply_markup=keyboard
    )

async def on_start(message: types.Message, state: FSMContext = None, context: AppContext = None):
    tg_user_id = message.from_user.id
    async with context.pool.acquire() as connection:
        async with connection.cursor() as cursor:
            try:
                await cursor.execute("SELECT is_registered FROM users WHERE tg_user_id = %s", (tg_user_id,))
                user = await cursor.fetchone()

                if user is not None and user[0] == 1:
                    current_state = await state.get_state()
                    logging.info(f"—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {message.from_user.id}: {current_state}")
                    await message.answer(
                        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª, –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É –∏ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º ‚ÄºÔ∏è\n\n"
                        "1Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ \"–ó–∞–≤—Ç—Ä–∞–∫ / –û–±–µ–¥ / –£–∂–∏–Ω\".\n\n"
                        "2Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Å—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–∂–º–∏—Ç–µ ¬´–º–µ–Ω—é¬ª."
                    )

                else:
                    await send_welcome(message, context)
                    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
                    scheduler.add_job(send_reminder, "date", run_date=datetime.now() + timedelta(minutes=30), args=[tg_user_id, context])
            except aiomysql.MySQLError as err:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {err}")

async def send_reminder(user_id: int, context: AppContext):
    try:
        bot = context.dispatcher.bot
        async with context.pool.acquire() as connection:
            async with connection.cursor() as cursor:
                await cursor.execute("SELECT is_registered FROM users WHERE tg_user_id = %s", (user_id,))
                user = await cursor.fetchone()

                if user is None:
                    keyboard = InlineKeyboardMarkup()
                    intro_button = InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="introduce")
                    keyboard.add(intro_button)

                    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                    await bot.send_message(
                        user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ chat_id
                        "–•–æ—Ç—å –±–æ—Ç—ã –∏ –Ω–µ —É–º–µ—é—Ç –≥—Ä—É—Å—Ç–∏—Ç—å, —è –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω,\n"
                        "—á—Ç–æ –º—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å üò¢\n"
                        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ",
                        reply_markup=keyboard
                    )
                    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")





async def handle_intro(callback_query: types.CallbackQuery, state: FSMContext, context: AppContext):
    tg_user_id = callback_query.from_user.id
    username = callback_query.from_user.first_name
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}. –ù–∏–∫–Ω–µ–π–º: {username}")

    async with context.pool.acquire() as connection:
        async with connection.cursor() as cursor:
            try:
                await cursor.execute("SELECT is_registered FROM users WHERE tg_user_id = %s", (tg_user_id,))
                user = await cursor.fetchone()

                if user is None:
                    await cursor.execute("INSERT INTO users (tg_user_id, username, is_registered) VALUES (%s, %s, 0)",
                                       (tg_user_id, username))
                else:
                    await cursor.execute("UPDATE users SET username = %s WHERE tg_user_id = %s", (username, tg_user_id))

                await connection.commit()
            except aiomysql.MySQLError as err:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {err}")

    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer_photo(
        photo="https://i.imgur.com/bhM3Kss.png",
        caption=(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {username}! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –∫–∞–∫—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –≤ —Å—É—Ç–∫–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∞—Ç—å.\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∫–∞–∫–æ–π —É –í–∞—Å —Ä–æ—Å—Ç?"
        )
    )

    await state.update_data(tg_user_id=tg_user_id, username=username)
    await state.set_state(UserData.waiting_for_height)

    logging.info(f"State set to UserData:waiting_for_height for user {tg_user_id}")

def register_start_handler(context: AppContext):
    dp = context.dispatcher
    dp.register_message_handler(lambda msg, state=None: on_start(msg, state, context), Command("start"))
    dp.register_callback_query_handler(lambda cb, state=None: handle_intro(cb, state, context), lambda c: c.data == "introduce")
